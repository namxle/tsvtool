#!/bin/bash

# Software Path

show_help() {
    echo "Usage: $0 <command> <arguments>"
    echo
    echo "Commands:"
	echo
    echo "	printcol					Print tsv col data with header"
    echo "	findincol					Find in tsv columns with terms"
	echo
    exit 1
}

# Check if command exists
check_command() {
	# List of available commands
	listcmds=("printcol" "findincol" "toexcel")
	# Iterate through the list
	cmdfound=0
	for item in "${listcmds[@]}"; do
		if [[ "$item" == "$CMD" ]]; then
			cmdfound=1
			break
		fi
	done
	# Check if command was found
	if [[ $cmdfound -eq 0 ]]; then
		echo "Command '$CMD' is not found.";
		show_help;
		exit 1
	fi
}

# Check if file exists
check_file() {
	if [ ! -f "$1" ]; then
		echo "$CMD: failed to open $1"
		exit -1
	fi
}

# List functions
printcol() {
	help() {
		echo
		echo "About: Print tsv columns and header"
		echo "Usage: $0 $CMD [options] <in.tsv>"
		echo
		echo "Options:"
		echo "	-h, --header				print header"
		echo "		--header-only			print header only"
		echo "	-c, --col-names				print certain column names delimited by comma. E.g. col1,col2"
		echo "	-n, --nlines				number of data lines [10]"
		echo "		--no-description		not print description, this option will disable the print of header"
		exit 1
	};

	if [ $# -eq 0 ]; then
    	help;
	fi

	# If no options are specified
	if [ $# -eq 1 ]; then
		file=$1;
	else
		file="${@: -1}";
	fi

	# Check if file exists
	check_file $file;

	# Optional variables
	col_names=""
	line_numbers=10
	print_header=0
	print_header_only=0
	print_description=1

	# Parse the flags and their values
	while [[ $# -gt 2 ]]; do
		case $1 in
			--header)
				print_header=1
				shift;
				;;
			-h)
				print_header=1
				shift;
				;;
			--header-only)
				print_header_only=1;
				print_header=1;
				shift;
				;;
			-c)
				col_names=$2
				shift 2;
				;;
			--col-names)
				col_names=$2
				shift 2;
				;;
			--no-description)
				print_description=0
				shift;
				;;
			-n)
				line_numbers=$2
				shift 2;
				;;
			--nlines)
				line_numbers=$2
				shift 2;
				;;
			*)
				echo "$CMD: invalid option '$1'";
				help;
				;;
		esac
	done

	# Modify some variables
	if [ $print_description -eq 0 ]; then
		print_header=0;
		print_header_only=0;
	fi

	# Print info
	cat ${file} | \
	awk -F"\t" \
		-v col_names=$col_names \
		-v print_header=$print_header \
		-v print_header_only=$print_header_only \
		-v print_des=$print_description \
		-v line_numbers=$line_numbers \
		'BEGIN { \
			if (col_names == "") { \
				col_name_avaiable = 0; \
			} else { \
				col_name_avaiable = 1; \
				split(col_names, col_names_tmp, ","); \
				for (e in col_names_tmp) { \
					c[col_names_tmp[e]] = 1; \
				}; \
			}; \
		} \
		{ \
			if (FNR == 1) {
				ln = ""; \
				if (print_header == 1 && print_des == 1) { \
					print ""; \
					print "------------------ Header ------------------"; \
				}; \
				for(i=1; i<=NF; i++){ \
					if (col_name_avaiable == 1) { \
						if (c[$i] == 1) { \
							if(i==1){ln=$i}else{ln=ln"\t"$i}; \
							cols_to_print[i] = 1; \
							if (print_header == 1) { \
								print i"\t"$i; \
							}; \
						} \
					} else { \
						if(i==1){ln=$i}else{ln=ln"\t"$i}; \
						cols_to_print[i] = 1; \
						if (print_header == 1) { \
							print i"\t"$i; \
						}; \
					} \
				} \
				if (print_header_only == 1) { \
					exit 0; \
				} else { \
					if (print_des == 1) { \
						print ""; \
						print "------------------  Data  ------------------"; \
					}; \
				} \
				print ln; \
			} else { \
				if (FNR > line_numbers + 1) {
					exit 0;
				}
				ln = ""; \
				for (i=1; i<=NF; i++) { \
					if (cols_to_print[i] == 1) { \
						if(i==1){ln=$i}else{ln=ln"\t"$i}; \
					} \
				} \
				print ln; \
			}; \
		}';

	if [ $print_description -eq 1 ]; then
		echo
	fi
	exit 0;
}

findincol() {
	help() {
		echo
		echo "About: Find in tsv columns specific data"
		echo "Usage: $0 $CMD [options] <terms> <in.tsv>"
		echo
		echo "<terms>: terms to find in columns separeated by comma. E.g. terms1,terms2 "
		echo
		echo "Options:"
		echo "	-c, --col-names				print certain column names separated by comma. E.g. col1,col2"
		echo "	-n, --nlines				number of data lines [all lines]"
		exit 1
	};

	if [ $# -lt 2 ]; then
    	help;
	fi

	# If no options are specified
	if [ $# -eq 2 ]; then
		terms=$1
		file=$2;
	else
		terms="${@: -2:1}";
		file="${@: -1}";
	fi

	# Check if file exists
	check_file $file;

	# Optional variables
	col_names=""
	line_numbers=0

	# Parse the flags and their values
	while [[ $# -gt 3 ]]; do
		case $1 in
			-c)
				col_names=$2
				shift 2;
				;;
			--col-names)
				col_names=$2
				shift 2;
				;;
			-n)
				line_numbers=$2
				shift 2;
				;;
			--nlines)
				line_numbers=$2
				shift 2;
				;;
			*)
				echo "$CMD: invalid option '$1'";
				help;
				;;
		esac
	done

	echo "Terms to find: ${terms}"
	echo "Column names: ${col_names}"

	cat ${file} | \
	awk -F"\t" \
		-v col_names=$col_names \
		-v line_numbers=$line_numbers \
		-v terms=$terms \
		'BEGIN { \
			if (col_names == "") { \
				col_name_avaiable = 0; \
			} else { \
				col_name_avaiable = 1; \
				split(col_names, col_names_tmp, ","); \
				for (e in col_names_tmp) { \
					c[col_names_tmp[e]] = 1; \
				}; \
			}; \
			tt = split(terms, t, ","); \
		} \
		{ \
			if (FNR == 1) {
				ln = ""; \
				for(i=1; i<=NF; i++){ \
					if (col_name_avaiable == 1) { \
						if (c[$i] == 1) { \
							if(i==1){ln=$i}else{ln=ln"\t"$i}; \
							cols_to_print[i] = 1; \
						} \
					} else { \
						if(i==1){ln=$i}else{ln=ln"\t"$i}; \
						cols_to_print[i] = 1; \
					} \
				} \
				print ln; \
			} else { \
				if (FNR > line_numbers + 1 && line_numbers != 0) {
					exit 0;
				}
				ln = ""; \
				is_print = 0; \
				for (i=1; i<=NF; i++) { \
					if (cols_to_print[i] == 1) { \
						for (j=1; j<=tt; j++) { \
							if (index($i, t[j]) != 0) { \
								is_print = 1; \
							}; \
						}; \
						print_data = $i; \
						if (is_print == 1) { print_data="#*"$i"*#"; }; \
						if(i==1){ln=print_data}else{ln=ln"\t"print_data}; \
					} \
				}; \
				if (is_print == 1) { \
					print ln; \
				}; \
			}; \
		}';

}

toexcel() {
	help() {
		echo
		echo "About: Convert to Excel with specific columns"
		echo "Usage: $0 $CMD [options] <in.tsv> <out.xlsx>"
		echo
		echo "Options:"
		echo "	-c, --col-names				print certain column names separated by comma. E.g. col1,col2"
		echo "	-n, --nlines				number of data lines [all lines]"
		exit 1
	};

	if [ $# -lt 2 ]; then
    	help;
	fi

	# If no options are specified
	if [ $# -eq 2 ]; then
		input=$1;
		output=$2;
	else
		input="${@: -2:1}";
		output="${@: -1}";
	fi

	# Check if file exists
	check_file $input;

	# Optional variables
	col_names=""
	line_numbers=0
	input_tmp="${input}.tmp"

	# Parse the flags and their values
	while [[ $# -gt 3 ]]; do
		case $1 in
			-c)
				col_names=$2
				shift 2;
				;;
			--col-names)
				col_names=$2
				shift 2;
				;;
			-n)
				line_numbers=$2
				shift 2;
				;;
			--nlines)
				line_numbers=$2
				shift 2;
				;;
			*)
				echo "$CMD: invalid option '$1'";
				help;
				;;
		esac
	done

	cat ${input} | \
	awk -F"\t" \
		-v col_names=$col_names \
		-v line_numbers=$line_numbers \
		'BEGIN { \
			if (col_names == "") { \
				col_name_avaiable = 0; \
			} else { \
				col_name_avaiable = 1; \
				split(col_names, col_names_tmp, ","); \
				for (e in col_names_tmp) { \
					c[col_names_tmp[e]] = 1; \
				}; \
			}; \
		} \
		{ \
			if (FNR == 1) {
				ln = ""; \
				for(i=1; i<=NF; i++){ \
					if (col_name_avaiable == 1) { \
						if (c[$i] == 1) { \
							if(i==1){ln=$i}else{ln=ln"\t"$i}; \
							cols_to_print[i] = 1; \
						} \
					} else { \
						if(i==1){ln=$i}else{ln=ln"\t"$i}; \
						cols_to_print[i] = 1; \
					} \
				} \
				print ln; \
			} else { \
				if (FNR > line_numbers + 1 && line_numbers != 0) {
					exit 0;
				}
				ln = ""; \
				for (i=1; i<=NF; i++) { \
					if (cols_to_print[i] == 1) { \
						if(i==1){ln=$i}else{ln=ln"\t"$i}; \
					} \
				}; \
				print ln; \
			}; \
		}' > $input_tmp

	python3 python3/tsvtoexcel.py -i $input_tmp -o $output
}

if [ $# -eq 0 ]; then
    show_help;
fi

# Assign the command
CMD=$1
shift 		# Remove the command from the arguments list
ARGS="$*" 	# Get command arguments

# Main function
main() {
	# Run check command
	check_command;
	
	# Run commands
	if [[ $CMD == "printcol" ]]; then
		printcol $ARGS;
	elif [[ $CMD == "findincol" ]]; then
		findincol $ARGS;
	elif [[ $CMD == "toexcel" ]]; then
		toexcel $ARGS;
	fi
}

main;